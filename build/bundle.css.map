{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Chart.svelte",
    "Controls.svelte",
    "ManageAssets.svelte",
    "ManageSplits.svelte",
    "Overlay.svelte"
  ],
  "sourcesContent": [
    "<style>\n    .chart-container {\n        position: relative;\n        width: 100vw;\n        height: 100vh;\n        overflow: hidden;\n    }\n</style>\n\n<div class=\"chart-container\">\n    <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n</div>\n",
    "<script>\n    import PortfolioList from './components/PortfolioList.svelte';\n    import CalcMethod from './components/CalcMethod.svelte';\n    import CalcCurrency from \"./components/CalcCurrency.svelte\";\n    import Consider from \"./components/Consider.svelte\";\n    import Assets from \"./components/assets/Assets.svelte\";\n    import Splits from \"./components/splits/Splits.svelte\";\n    import Export from \"./components/Export.svelte\";\n</script>\n\n<style>\n    .controls {\n        position: fixed;\n        left: 10px;\n        top: 40px;\n        background-color: #fff;\n        padding: 10px;\n        overflow: auto;\n        max-height: calc(100% - 40px);\n        box-sizing: border-box;\n        z-index: 2;\n        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);\n        opacity: 0.5;\n    }\n\n    .controls:hover {\n        opacity: 1;\n    }\n</style>\n\n<div class=\"controls\">\n    <PortfolioList />\n    <hr>\n    <CalcMethod />\n    <hr>\n    <CalcCurrency />\n    <hr>\n    <Consider />\n    <hr>\n    <Assets />\n    <hr>\n    <Splits />\n    <hr>\n    <Export />\n</div>\n",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    import {locales} from \"@presentation\";\n    import {ASSET_DEFAULT_FIELDS} from \"@constants\";\n    import {portfoliosStore, setAssets} from \"@store\";\n    import {deepClone} from \"@helpers\";\n\n    const assetFields = ASSET_DEFAULT_FIELDS;\n    const dispatch = createEventDispatcher();\n\n    let assets = [];\n    let assetsNotChanged = [];\n\n    portfoliosStore.watch(function (state) {\n        const currentPortfolio = state.list.filter(item => item.name === state.current)[0];\n\n        assets = deepClone(currentPortfolio.assets);\n        assetsNotChanged = deepClone(assets);\n    });\n\n    function removeAsset(asset) {\n        if (assets.includes(asset)) {\n            assets.splice(assets.indexOf(asset), 1);\n            assets = assets;\n        }\n    }\n\n    function save() {\n        setAssets(assets);\n        done();\n    }\n\n    function cancel() {\n        assets = deepClone(assetsNotChanged);\n        done();\n    }\n\n    function done() {\n        dispatch('done');\n    }\n</script>\n\n<style>\n    .table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    .table td,\n    .table th {\n        border: 1px solid #cccccc;\n        min-width: 20px;\n        text-align: left;\n    }\n\n    .remove {\n        font-weight: bold;\n        cursor: pointer;\n    }\n</style>\n\n<hr>\n<div>\n    <table class=\"table\" cellpadding=\"0\" cellspacing=\"0\">\n        <thead>\n            <tr>\n                {#each assetFields as field}\n                    <th>{locales(`assets.${field}`)}</th>\n                {/each}\n                <th>{locales(`common.actions`)}</th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each assets as asset}\n                <tr>\n                    {#each assetFields as field}\n                        <td contenteditable=\"true\" bind:textContent={asset[field]}></td>\n                    {/each}\n                    <td><span class=\"remove\" on:click={removeAsset(asset)}>{locales('actions.remove')}</span></td>\n                </tr>\n            {/each}\n        </tbody>\n    </table>\n\n    <div>\n        <button on:click={save}>{locales('actions.save')}</button>\n        <button on:click={cancel}>{locales('actions.cancel')}</button>\n    </div>\n</div>\n",
    "<script>\n    import {createEventDispatcher} from 'svelte';\n    import {locales} from \"@presentation\";\n    import {SPLIT_DEFAULT_FIELDS} from \"@constants\";\n    import {setSplits, splitsStore} from \"@store\";\n    import {deepClone} from \"@helpers\";\n\n    const splitFields = SPLIT_DEFAULT_FIELDS;\n    const dispatch = createEventDispatcher();\n\n    let splits = [];\n    let splitsNotChanged = [];\n\n    splitsStore.watch(function (state) {\n        splits = [];\n        const splitsCurrentState = deepClone(state);\n        for (const ticker in splitsCurrentState) {\n            if (!splitsCurrentState.hasOwnProperty(ticker)) {\n                continue;\n            }\n            const tickerData = splitsCurrentState[ticker] || [];\n            tickerData.forEach(item => {\n                item.ticker = ticker;\n                splits.push(item);\n            });\n        }\n        splitsNotChanged = deepClone(splits);\n    });\n\n    function removeSplit(split) {\n        if (splits.includes(split)) {\n            splits.splice(splits.indexOf(split), 1);\n            splits = splits;\n        }\n    }\n\n    function save() {\n        setSplits(splits);\n        done();\n    }\n\n    function cancel() {\n        splits = deepClone(splitsNotChanged);\n        done();\n    }\n\n    function done() {\n        dispatch('done');\n    }\n</script>\n\n<style>\n    .table {\n        width: 100%;\n        border-collapse: collapse;\n    }\n\n    .table td,\n    .table th {\n        border: 1px solid #cccccc;\n        min-width: 20px;\n        text-align: left;\n    }\n\n    .remove {\n        font-weight: bold;\n        cursor: pointer;\n    }\n</style>\n\n<hr>\n<div>\n    <table class=\"table\" cellpadding=\"0\" cellspacing=\"0\">\n        <thead>\n            <tr>\n                {#each splitFields as field}\n                    <th>{locales(`splits.${field}`)}</th>\n                {/each}\n                <th>{locales(`common.actions`)}</th>\n            </tr>\n        </thead>\n        <tbody>\n            {#each splits as split}\n                <tr>\n                    {#each splitFields as field}\n                        <td contenteditable=\"true\" bind:textContent={split[field]}></td>\n                    {/each}\n                    <td><span class=\"remove\" on:click={removeSplit(split)}>{locales('actions.remove')}</span></td>\n                </tr>\n            {/each}\n        </tbody>\n    </table>\n\n    <div>\n        <button on:click={save}>{locales('actions.save')}</button>\n        <button on:click={cancel}>{locales('actions.cancel')}</button>\n    </div>\n</div>\n",
    "<script>\n    export let loading = true;\n</script>\n\n<style>\n    @keyframes throbber {\n        0% {\n            transform: scale(1);\n        }\n\n        100% {\n            transform: scale(0.2);\n            opacity: 0.5;\n        }\n    }\n\n    .overlay {\n        position: absolute;\n        z-index: 100;\n        left: 0;\n        top: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(255, 255, 255, 0.75);\n        color: #000;\n        opacity: 0;\n        pointer-events: none;\n        transition: opacity 0.3s;\n    }\n\n    .overlay._visible {\n        opacity: 1;\n        pointer-events: auto;\n    }\n\n    .throbber {\n        position: absolute;\n        left: 50%;\n        top: 50%;\n        width: 40px;\n        height: 40px;\n        margin-left: -20px;\n        margin-top: -20px;\n        border-radius: 50%;\n        background-color: currentColor;\n        box-sizing: border-box;\n        animation: throbber 1s infinite alternate;\n    }\n</style>\n\n<div class=\"overlay {loading ? '_visible' : ''}\">\n    <div class=\"throbber\"></div>\n</div>\n"
  ],
  "names": [],
  "mappings": "AACI,+BAAiB,CACb,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,QAAQ,CAAE,MACd;ACKA,uBAAU,CACN,QAAQ,CAAE,KAAK,CACf,IAAI,CAAE,IAAI,CACV,GAAG,CAAE,IAAI,CACT,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,IAAI,CACb,QAAQ,CAAE,IAAI,CACd,UAAU,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAC7B,UAAU,CAAE,UAAU,CACtB,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACvC,OAAO,CAAE,GACb,CAEA,uBAAS,MAAO,CACZ,OAAO,CAAE,CACb;ACgBA,kCAAO,CACH,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,QACrB,CAEA,oBAAM,CAAC,gBAAE,CACT,oBAAM,CAAC,gBAAG,CACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAChB,CAEA,mCAAQ,CACJ,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OACZ;ACNA,kCAAO,CACH,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,QACrB,CAEA,oBAAM,CAAC,gBAAE,CACT,oBAAM,CAAC,gBAAG,CACN,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAChB,CAEA,mCAAQ,CACJ,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OACZ;AC9DA,WAAW,sBAAS,CAChB,EAAG,CACC,SAAS,CAAE,MAAM,CAAC,CACtB,CAEA,IAAK,CACD,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,OAAO,CAAE,GACb,CACJ,CAEA,sBAAS,CACL,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,GAAG,CACZ,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CACrC,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IAAI,CACpB,UAAU,CAAE,OAAO,CAAC,IACxB,CAEA,QAAQ,uBAAU,CACd,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,IACpB,CAEA,uBAAU,CACN,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,GAAG,CACT,GAAG,CAAE,GAAG,CACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,KAAK,CAClB,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,gBAAgB,CAAE,YAAY,CAC9B,UAAU,CAAE,UAAU,CACtB,SAAS,CAAE,sBAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,SACpC"
}